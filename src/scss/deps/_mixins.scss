// Fonts
// ----------------------------------------------

// Order of the includes matters, and it is: normal, bold, italic, bold+italic.
@mixin font-face($font-family, $file-path, $weight: normal, $style: normal, $asset-pipeline: false ) {
    @font-face {
        font-family: quote($font-family);

        @if $asset-pipeline == true {
            src: font-url('#{$file-path}.eot');
            src: font-url('#{$file-path}.eot?#iefix') format('embedded-opentype'),
                 font-url('#{$file-path}.woff') format('woff'),
                 font-url('#{$file-path}.ttf') format('truetype'),
                 font-url('#{$file-path}.svg##{$font-family}') format('svg');
        } @else {
            src: url('#{$file-path}.eot');
            src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'),
                 url('#{$file-path}.woff') format('woff'),
                 url('#{$file-path}.ttf') format('truetype'),
                 url('#{$file-path}.svg##{$font-family}') format('svg');
        }
        font-weight: $weight;
        font-style: $style;
    }
}

// Input placeholder
@mixin placeholder {
    &::-webkit-input-placeholder {@content;}
    &:-moz-placeholder           {@content;}
    &::-moz-placeholder          {@content;}
    &:-ms-input-placeholder      {@content;}
}

// line-height - divide desired line-height by font-size
@mixin line-height($line-height: $base-line-height, $font-size: $base-font-size) {
    line-height: $line-height / $font-size;
}

@mixin margin-bottom($line-height: $base-line-height, $font-size: $base-font-size) {
    margin-bottom: $line-height / $font-size + em;
}

// Vertical rhythm - combines font-size, line-height, and margin-bottom
@mixin vertical-rhythm($line-height: $base-line-height, $font-size: $base-font-size, $margin-divide: 2) {
    font-size: #{$font-size}px;
    font-size: #{$font-size / 10}rem;
    line-height: $line-height / $font-size;
    margin-bottom: ($line-height / $font-size) / $margin-divide + em;
}

// Helpers
// ----------------------------------------------

// Image replacement
@mixin ir {
    overflow: hidden;
    border: 0;
    background-color: transparent;
    *text-indent: -9999px;

    &:before {
        display: block;
        width: 0;
        height: 150%;
        content: "";
    }
}

// Center align block element
@mixin center {
    display: block;
    margin-right: auto;
    margin-left: auto;
}

@mixin text-overflow {
    display: block;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin circle {
    display: inline-block;
    overflow: hidden;
    border-radius: 50%;
}

@mixin vertical-align {
    position: relative;
    top: 50%;
    // Adding perspective prevents elements looking blurry
    // if placed on a "half pixel"
    transform: perspective(1px) translateY(-50%);
}


$elementSeparator: '__';
$modifierSeparator: '--';

@function containsModifier($selector) {
	$selector: selectorToString($selector);
	@if str-index($selector, $modifierSeparator) {
		@return true;
	} @else {
		@return false;
	}
}

@function selectorToString($selector) {
	$selector: inspect($selector); //cast to string
	$selector: str-slice($selector, 2, -2); //remove brackets
	@return $selector;
}

@function getBlock($selector) {
	$selector: selectorToString($selector);
	$modifierStart: str-index($selector, $modifierSeparator) - 1;
	@return str-slice($selector, 0, $modifierStart);
}

@mixin b($block) {
	.#{$block} {
		@content;
	}
}

@mixin e($element) {
	$selector: &;
	@if containsModifier($selector) {
		$block: getBlock($selector);
		@at-root {
			#{$selector} {
				#{$block+$elementSeparator+$element} {
					@content;
				}
			}
		}
	} @else {
		@at-root {
			#{$selector+$elementSeparator+$element} {
				@content;
			}
		}
	}
}

@mixin m($modifier) {
	@at-root {
		#{&}#{$modifierSeparator+$modifier} {
			@content;
		}
	}
}
